{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M.A\\\\Downloads\\\\pwyash-react-quizz-app-main\\\\pwyash-react-quizz-app-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport QuizView from \"./components/QuizView\";\nimport ScoreView from \"./components/ScoreView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"khjfRvtlOQkkGaAvUz41ztOqX2XxvdjIIqbNvO9b\";\nfunction App() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [isQuizOver, setIsQuizOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const response = await fetch(`https://quizapi.io/api/v1/questions?apiKey=${API_KEY}&category=code&limit=10&tags=HTML,DevOps,JavaScript,Laravel,MySQL,PHP,WordPress`);\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Error ${response.status}: ${errorText}`);\n        }\n        const data = await response.json();\n        if (Array.isArray(data)) {\n          const formattedQuestions = data.map(q => ({\n            question: q.question,\n            answers: Object.entries(q.answers).map(_ref => {\n              let [key, answer] = _ref;\n              return {\n                text: answer.text,\n                isCorrect: answer.isCorrect\n              };\n            })\n          }));\n          setQuestions(formattedQuestions);\n        } else {\n          throw new Error(\"Unexpected response format\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching questions:\", error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, []);\n  const handleAnswerClick = isCorrect => {\n    if (isCorrect) setScore(score + 1);\n    const next = currentQuestion + 1;\n    if (next < questions.length) setCurrentQuestion(next);else setIsQuizOver(true);\n  };\n  const handleResetClick = () => {\n    setScore(0);\n    setCurrentQuestion(0);\n    setIsQuizOver(false);\n    setError(null);\n    setLoading(true);\n    fetchQuestions(); // Re-fetch questions on reset\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this), isQuizOver ? /*#__PURE__*/_jsxDEV(ScoreView, {\n      handleResetClick: handleResetClick,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) : questions.length > 0 && /*#__PURE__*/_jsxDEV(QuizView, {\n      questions: questions,\n      currentQuestion: currentQuestion,\n      handleAnswerClick: handleAnswerClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"YBhqc+TfRpA1pyGhXTuJrGVKgp8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","QuizView","ScoreView","API_KEY","App","questions","setQuestions","currentQuestion","setCurrentQuestion","isQuizOver","setIsQuizOver","score","setScore","loading","setLoading","error","setError","fetchQuestions","response","fetch","ok","errorText","text","Error","status","data","json","Array","isArray","formattedQuestions","map","q","question","answers","Object","entries","key","answer","isCorrect","console","message","handleAnswerClick","next","length","handleResetClick"],"sources":["C:/Users/M.A/Downloads/pwyash-react-quizz-app-main/pwyash-react-quizz-app-main/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport QuizView from \"./components/QuizView\";\nimport ScoreView from \"./components/ScoreView\";\n\nconst API_KEY = \"khjfRvtlOQkkGaAvUz41ztOqX2XxvdjIIqbNvO9b\";\n\nfunction App() {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [isQuizOver, setIsQuizOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const response = await fetch(`https://quizapi.io/api/v1/questions?apiKey=${API_KEY}&category=code&limit=10&tags=HTML,DevOps,JavaScript,Laravel,MySQL,PHP,WordPress`);\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Error ${response.status}: ${errorText}`);\n        }\n\n        const data = await response.json();\n        \n        if (Array.isArray(data)) {\n          const formattedQuestions = data.map(q => ({\n            question: q.question,\n            answers: Object.entries(q.answers).map(([key, answer]) => ({\n              text: answer.text,\n              isCorrect: answer.isCorrect,\n            })),\n          }));\n          setQuestions(formattedQuestions);\n        } else {\n          throw new Error(\"Unexpected response format\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching questions:\", error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchQuestions();\n  }, []);\n\n  const handleAnswerClick = (isCorrect) => {\n    if (isCorrect) setScore(score + 1);\n\n    const next = currentQuestion + 1;\n    if (next < questions.length) setCurrentQuestion(next);\n    else setIsQuizOver(true);\n  };\n\n  const handleResetClick = () => {\n    setScore(0);\n    setCurrentQuestion(0);\n    setIsQuizOver(false);\n    setError(null);\n    setLoading(true);\n    fetchQuestions(); // Re-fetch questions on reset\n  };\n\n  return (\n    <div className=\"App\">\n      {loading && <div>Loading questions...</div>}\n      {error && <div>Error: {error}</div>}\n      {isQuizOver ? (\n        <ScoreView handleResetClick={handleResetClick} score={score} />\n      ) : (\n        questions.length > 0 && (\n          <QuizView\n            questions={questions}\n            currentQuestion={currentQuestion}\n            handleAnswerClick={handleAnswerClick}\n          />\n        )\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}