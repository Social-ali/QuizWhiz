{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M.A\\\\Downloads\\\\pwyash-react-quizz-app-main\\\\pwyash-react-quizz-app-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport QuizView from \"./components/QuizView\";\nimport ScoreView from \"./components/ScoreView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [isQuizOver, setIsQuizOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [quizStarted, setQuizStarted] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState(\"\"); // Track selected category\n\n  // Categories mapping\n  const categories = [{\n    name: \"Select a category\",\n    id: \"\"\n  }, {\n    name: \"Computer\",\n    id: 18\n  }, {\n    name: \"Politics\",\n    id: 24\n  }, {\n    name: \"Sports\",\n    id: 21\n  }, {\n    name: \"General Knowledge\",\n    id: 9\n  }, {\n    name: \"History\",\n    id: 23\n  }];\n\n  // Fetch questions when the selected category changes\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      if (!selectedCategory) return; // Don't fetch if no category is selected\n      setIsLoading(true);\n      try {\n        const response = await fetch(`https://opentdb.com/api.php?amount=10&category=${selectedCategory}&type=multiple`);\n        const data = await response.json();\n        if (data.results) {\n          const formattedQuestions = data.results.map(q => ({\n            question: q.question,\n            correctAnswer: q.correct_answer,\n            answers: [...q.incorrect_answers, q.correct_answer].sort(() => Math.random() - 0.5).map(answer => ({\n              text: answer,\n              isCorrect: answer === q.correct_answer\n            }))\n          }));\n          setQuestions(formattedQuestions);\n        } else {\n          console.error(\"Unexpected data format:\", data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching questions:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, [selectedCategory]);\n\n  // Handle answer selection\n  const handleAnswerClick = (isCorrect, answer) => {\n    if (isCorrect) setScore(score + 1);\n    setUserAnswers([...userAnswers, {\n      answer,\n      isCorrect\n    }]);\n    const next = currentQuestion + 1;\n    if (next < questions.length) setCurrentQuestion(next);else setIsQuizOver(true);\n  };\n\n  // Reset the quiz state\n  const handleResetClick = () => {\n    setScore(0);\n    setCurrentQuestion(0);\n    setIsQuizOver(false);\n    setUserAnswers([]);\n    setQuizStarted(false);\n    setSelectedCategory(\"\"); // Reset selected category\n  };\n\n  // Start the quiz\n  const handleStartQuiz = () => {\n    setQuizStarted(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: !quizStarted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to the Quiz!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCategory,\n        onChange: e => setSelectedCategory(e.target.value),\n        children: categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: category.id,\n          children: category.name\n        }, category.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartQuiz,\n        disabled: !selectedCategory // Disable button if no category selected\n        ,\n        children: \"Get Started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this) : isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this) : isQuizOver ? /*#__PURE__*/_jsxDEV(ScoreView, {\n      handleResetClick: handleResetClick,\n      score: score,\n      totalQuestions: questions.length,\n      userAnswers: userAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this) : questions.length > 0 && /*#__PURE__*/_jsxDEV(QuizView, {\n      questions: questions,\n      currentQuestion: currentQuestion,\n      handleAnswerClick: handleAnswerClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5bqnlDxuVFQVSqZHSu7n1KW44tc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","QuizView","ScoreView","App","questions","setQuestions","currentQuestion","setCurrentQuestion","isQuizOver","setIsQuizOver","score","setScore","userAnswers","setUserAnswers","quizStarted","setQuizStarted","isLoading","setIsLoading","selectedCategory","setSelectedCategory","categories","name","id","fetchQuestions","response","fetch","data","json","results","formattedQuestions","map","q","question","correctAnswer","correct_answer","answers","incorrect_answers","sort","Math","random","answer","text","isCorrect","console","error","handleAnswerClick","next","length","handleResetClick","handleStartQuiz","e","target","value","category"],"sources":["C:/Users/M.A/Downloads/pwyash-react-quizz-app-main/pwyash-react-quizz-app-main/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport QuizView from \"./components/QuizView\";\nimport ScoreView from \"./components/ScoreView\";\n\nfunction App() {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [isQuizOver, setIsQuizOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [quizStarted, setQuizStarted] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState(\"\"); // Track selected category\n\n  // Categories mapping\n  const categories = [\n    { name: \"Select a category\", id: \"\" },\n    { name: \"Computer\", id: 18 },\n    { name: \"Politics\", id: 24 },\n    { name: \"Sports\", id: 21 },\n    { name: \"General Knowledge\", id: 9 },\n    { name: \"History\", id: 23 },\n  ];\n\n  // Fetch questions when the selected category changes\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      if (!selectedCategory) return; // Don't fetch if no category is selected\n      setIsLoading(true);\n      try {\n        const response = await fetch(`https://opentdb.com/api.php?amount=10&category=${selectedCategory}&type=multiple`);\n        const data = await response.json();\n\n        if (data.results) {\n          const formattedQuestions = data.results.map(q => ({\n            question: q.question,\n            correctAnswer: q.correct_answer,\n            answers: [...q.incorrect_answers, q.correct_answer].sort(() => Math.random() - 0.5).map(answer => ({\n              text: answer,\n              isCorrect: answer === q.correct_answer,\n            })),\n          }));\n          setQuestions(formattedQuestions);\n        } else {\n          console.error(\"Unexpected data format:\", data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching questions:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchQuestions();\n  }, [selectedCategory]);\n\n  // Handle answer selection\n  const handleAnswerClick = (isCorrect, answer) => {\n    if (isCorrect) setScore(score + 1);\n    setUserAnswers([...userAnswers, { answer, isCorrect }]);\n\n    const next = currentQuestion + 1;\n    if (next < questions.length) setCurrentQuestion(next);\n    else setIsQuizOver(true);\n  };\n\n  // Reset the quiz state\n  const handleResetClick = () => {\n    setScore(0);\n    setCurrentQuestion(0);\n    setIsQuizOver(false);\n    setUserAnswers([]);\n    setQuizStarted(false);\n    setSelectedCategory(\"\"); // Reset selected category\n  };\n\n  // Start the quiz\n  const handleStartQuiz = () => {\n    setQuizStarted(true);\n  };\n\n  return (\n    <div className=\"App\">\n      {!quizStarted ? (\n        <div>\n          <h1>Welcome to the Quiz!</h1>\n          <select\n            value={selectedCategory}\n            onChange={(e) => setSelectedCategory(e.target.value)}\n          >\n            {categories.map((category) => (\n              <option key={category.id} value={category.id}>\n                {category.name}\n              </option>\n            ))}\n          </select>\n          <button\n            onClick={handleStartQuiz}\n            disabled={!selectedCategory} // Disable button if no category selected\n          >\n            Get Started\n          </button>\n        </div>\n      ) : isLoading ? (\n        <div>Loading questions...</div>\n      ) : isQuizOver ? (\n        <ScoreView \n          handleResetClick={handleResetClick} \n          score={score} \n          totalQuestions={questions.length} \n          userAnswers={userAnswers} \n        />\n      ) : (\n        questions.length > 0 && (\n          <QuizView\n            questions={questions}\n            currentQuestion={currentQuestion}\n            handleAnswerClick={handleAnswerClick}\n          />\n        )\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}